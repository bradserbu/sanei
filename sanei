#!/bin/bash

CURDIR="$( cd `dirname "${BASH_SOURCE[0]}"` && pwd )"
source $CURDIR/functions.sh

function=$1

sanei_install(){
    local module=$1
    local reinstall=$2

    if [[ -z $reinstall ]]; then
        if is_installed "$module"; then
            echo "You already installed: $module. Skipping..."
            return 1
        fi
    else
        local re="re"
    fi

    echo "Will ${re}install: $module."

    if [[ -f $SCRIPT_DIR/modules/$module/install.sh ]]; then
        source $SCRIPT_DIR/modules/$module/install.sh
    elif [[ -d $SCRIPT_DIR/modules/$module ]]; then
        set_installed $module
    else
        echo "Module $module does not exist."
    fi
}
sanei_update(){
    # TODO: change $TEMPLATE_ROOT for a local variable passed to the function
    for module in list_installed
    do
        # /etc #
        # recursive linking #
        link_all_files_recursive $SCRIPT_DIR/modules/$module/etc $TEMPLATE_ROOT/etc

        # recursive copying and filling #
        fill_template_recursive $SCRIPT_DIR/modules/$module/etc-template $TEMPLATE_ROOT/etc

        # recursive copying #
        copy_all_files_recursive $SCRIPT_DIR/modules/$module/etc-copy $TEMPLATE_ROOT/etc

        # non-recursive linking of folders #
        link_all_dirs $SCRIPT_DIR/modules/$module/etc-link $TEMPLATE_ROOT/etc

        # others #
        # copy /usr if exists #
        copy_all_files_recursive $SCRIPT_DIR/modules/$module/usr $TEMPLATE_ROOT/usr

        # dotfiles
        if [[ -d $SCRIPT_DIR/modules/$module/root ]]; then
            link_all_files $SCRIPT_DIR/modules/$module/root $TEMPLATE_ROOT/root
            # link also folders #
            link_all_dirs $SCRIPT_DIR/modules/$module/root $TEMPLATE_ROOT/root
        fi

        if [[ -f $SCRIPT_DIR/modules/$module/post-update.sh ]]; then
            source $SCRIPT_DIR/modules/$module/post-update.sh
        fi
    done
}
sanei_update_containers(){
    # for each container that wants to have auto-updated links
    containers=($(/usr/bin/lxc-ls -1))

    for container in ${containers[@]}
    do
        TEMPLATE_ROOT=/lxc/$container/rootfs
        sanei_update
    done
}

dialog_setup_vars(){
    : ${DIALOG=dialog}
    : ${DIALOG_OK=0}
    : ${DIALOG_CANCEL=1}
    : ${DIALOG_HELP=2}
    : ${DIALOG_EXTRA=3}
    : ${DIALOG_ITEM_HELP=4}
    : ${DIALOG_ESC=255}
}
dialog_setup_tempfile(){
    tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
    trap "rm -f $tempfile" 0 1 2 5 15
}

sanei_configure(){
    dialog_setup_vars
    dialog_setup_tempfile

    $DIALOG --backtitle "No Such Organization" \
        --title "CHECKLIST BOX" "$@" \
        --checklist "Hi, this is a checklist box. You can use this to \n\
present a list of choices which can be turned on or \n\
off. If there are more items than can fit on the \n\
screen, the list will be scrolled. You can use the \n\
UP/DOWN arrow keys, the first letter of the choice as a \n\
hot key, or the number keys 1-9 to choose an option. \n\
Press SPACE to toggle an option on/off. \n\n\
  Which of the following are fruits?" 20 61 5 \
        "Apple"  "It's an apple." off \
        "Dog"    "No, that's not my dog." ON \
        "Orange" "Yeah, that's juicy." off \
        "Chicken"    "Normally not a pet." off \
        "Cat"    "No, never put a dog and a cat together!" oN \
        "Fish"   "Cats like fish." On \
        "Lemon"  "You know how it tastes." on 2> $tempfile
    retval=$?
    case $retval in
      $DIALOG_OK)
        echo "Result: `cat $tempfile`";;
      $DIALOG_CANCEL)
        echo "Cancel pressed.";;
      $DIALOG_ESC)
        if test -s $tempfile ; then
          cat $tempfile
        else
          echo "ESC pressed."
        fi
        ;;
    esac

}

case function in
    "install" )
        sanei_install $2 $3
        ;;
    "update" )
        sanei_update
        ;;
    "updatelxc" )
        sanei_update_containers
        ;;
    "configure" )
        sanei_configure
        ;;
    * )
        echo "Welcome to SANEi 0.1"
        echo
        echo "Available commands are:"
        echo "  install"
        echo "  update"
        echo "  updatelxc"
        ;;
esac

